#!/bin/bash
#
# Usage: psims -s <sitename> -p <paramfile> -c <campaign> -g <gridlist> [ -t test_result ] 

# crash: Report a problem and exit
crash()
{
    echo "$@" >&2
    exit 1
}

# Usage: crash and report usage
usage()
{
   crash "Usage: $0 -s <sitename> -p <paramfile> -c <campaign> -g <gridlist> [ -t test_result ]"
}

# Find absolute path
abspath()
{
   readlink -f $1
}

# Verify an argument is not null
verify_not_null()
{
   argname=$1; shift
   if [ _$1 != _ ]; then
      return 0;
   else
      echo Error: $argname undefined
      usage
   fi  
}

# Process command line arguments
while [ $# -gt 0 ]; do
  case $1 in
    -c) campaign_arg=$2; shift 2;;
    -g) gridlist=$2; shift 2;;
    -p) paramfile=$2; shift 2;;
    -s) site=$2; shift 2;;
    -t) test_result=$2; shift 2;;
    *) usage;;
  esac
done

# Required arguments
verify_not_null campaign $campaign_arg
verify_not_null gridlist $gridlist
verify_not_null paramfile $paramfile
verify_not_null site $site

# Verify site config exists
if [ ! -f "conf/$site.xml" ]; then
   crash "Unable to find configuration file conf/$site.xml"
fi

# Verify test result directory exists
if [ -n "$test_result" ]; then
   if [ ! -d "$test_result" ]; then
      crash "Unable to find test result directory $test_result"
   fi
fi

# Verify paramfile exists
paramfile=$( abspath $paramfile )
if [ ! -f $paramfile ]; then
   crash "Could not find parameter file $paramfile in params!"
fi

# Verify campaign directory exists
campaign_arg=$( abspath $campaign_arg )
if [ ! -d "$campaign_arg" ]; then
   crash "Campaign directory $campaign_arg does not exist!"
fi

# Verify gridlist exists
gridlist=$( abspath $gridlist )
if [ ! -f "$gridlist" ]; then
   crash "Gridlist file does not exist!"
fi

# Create next unique run id and run directory
export rundir=$( abspath $( echo run??? | sed -e 's/^.*run//' | awk '{ printf("run%03d\n", $1+1)}' ))
mkdir $rundir || crash "Unable to create run directory"
workdir=$rundir

sed -e '/^[[:space:]]*\(#.*\)*$/d' -e 's/#.*//' -e 's/  */=/' -e 's/^/export /' $paramfile > $rundir/params.psims
export PATH=$PWD/bin:$PATH
verify_params.sh $rundir/params.psims || crash "Aborting due to errors in params file"

source $rundir/params.psims
export campaign=$campaign_arg # Ignore campaigns defined in params file
export SWIFT_HEAP_MAX=5120M
export SWIFT_USERHOME=$rundir

# Check for work_directory location
if [ -n "$work_directory" ]; then
   workdir="$( abspath $work_directory )/$( basename $rundir )"
   if [ -d "$workdir" ]; then
      crash "Work directory $workdir already exists"
   fi
   mkdir -p $workdir
   cp $rundir/params.psims $workdir
fi

# Copy required files to the work_directory
cp $campaign/*.nc4 $workdir/
cp $gridlist $workdir/gridList.txt
cp RunpSIMS.swift $workdir
cp combine.swift $workdir
cp bin/RunpSIMS.sh $workdir
cp conf/swift.properties $workdir
cp conf/$site.xml $workdir/sites.xml
cp conf/$site.cf $workdir/cf
cp $paramfile $workdir/paramfile
chmod a+rw $workdir/*

cd $workdir
source params.psims

# Record arguments in ABOUT file
cat << EOF > ABOUT
Site           = $site
Parameter      = $( abspath $paramfile )
Gridlist       = $( abspath $gridlist )
Campaign       = $campaign_arg
Run directory  = $rundir
Work directory = $workdir
EOF

# Echo parameters
cat ABOUT
echo -e "\nParameters:"
cat $workdir/params.psims
echo

# Extract input_tars
if [ -n "$tar_inputs" ]; then
   echo "Setting up data..."
   tar_files=$( echo $tar_inputs | sed s/,/' '/g )
   for file in $tar_files; do
      echo "Extracting $file"
      tar xvf $file 2>&1 | while read line; do
         x=$((x+1))
         echo -en "$x files extracted\r"
      done
   done
fi

# Extract s3_input_tars
if [ -n "$s3_tar_inputs" ]; then
   echo "Setting up data from s3..."
   s3_tar_files=$( echo $s3_tar_inputs | sed s/,/' '/g )
   for file in $s3_tar_files; do
      echo "Extracting $file"
      s3cmd get $file
      tar xvf $( basename $file ) 2>&1 | while read line; do
         x=$((x+1))
         echo -en "$x files extracted\r"
      done
   done
fi


arguments="-campaign=$campaign -refdata=$refdata -workdir=$workdir -weather=$weather -soils=$soils -variables=$variables -num_chunks=$num_chunks"

# resume.parts.sh
echo "PATH=$PATH:$PWD/bin" >> resume.parts.sh
echo "source params.psims" >> resume.parts.sh
echo "swift -logfile /dev/null -sites.file sites.xml -tc.file tc.data -config cf -resume RunpSIMS*.rlog RunpSIMS.swift $arguments 2>&1 | tee -a swift.out" >> resume.parts.sh

# rerun.parts.sh
echo "PATH=$PATH:$PWD/bin" >> rerun.parts.sh
echo "source params.psims" >> rerun.parts.sh
echo "swift -logfile /dev/null -sites.file sites.xml -tc.file tc.data -config cf RunpSIMS.swift $arguments 2>&1 | tee -a swift.out" >> rerun.parts.sh

# resume.combine.sh
echo "PATH=$PATH:$PWD/bin" >> resume.combine.sh
echo "source params.psims" >> resume.combine.sh
echo "swift -logfile /dev/null -sites.file sites.xml -tc.file tc.data -config cf -resume combine*.rlog combine.swift $arguments 2>&1 | tee -a swift.out" >> resume.combine.sh

# rerun.combine.sh
echo "PATH=$PATH:$PWD/bin" >> rerun.combine.sh
echo "source params.psims" >> rerun.combine.sh
echo "swift -logfile /dev/null -sites.file sites.xml -tc.file tc.data -config cf combine.swift $arguments 2>&1 | tee -a swift.out" >> rerun.combine.sh

chmod +x resume.parts.sh rerun.parts.sh resume.combine.sh rerun.combine.sh

# Generate sites.xml file in run directory
gensites -p cf $rundir/../conf/$site.xml > sites.xml

# Generate parts
runpsimsSwift="swift -logfile /dev/null -sites.file sites.xml -tc.file tc.data -config cf RunpSIMS.swift $arguments" 
echo >> ABOUT
echo "Swift RunpSIMS command: $runpsimsSwift" >> ABOUT
eval $runpsimsSwift 2>&1 | tee -a swift.out

# Post processing
combineSwift="swift -logfile /dev/null -sites.file sites.xml -tc.file tc.data -config cf combine.swift $arguments"
echo >> ABOUT
echo "Swift combine command: $combineSwift" >> ABOUT
eval $combineSwift 2>&1 | tee -a swift.out

# Plots
echo Generating plots...
$rundir/../bin/activityplot.pl combine-2*.log plot-combine.png &> /dev/null 
$rundir/../bin/activityplot.pl RunpSIMS-2*.log plot-psims.png &> /dev/null
echo -e "Done\n"

# Testing
if [ -n "$test_result" ]; then
   echo Comparing results to test data at $test_result
   $rundir/../bin/cmp_output.py $rundir $test_result
   if [ "$?" == "0" ]; then
      echo "Test passed"
   else
      echo "Test failed"
   fi
fi

# Move data back to original run directory
if [ "$rundir" != "$workdir" ]; then
   echo Cleaning up data in $workdir...
   echo rm -rf $workdir/data
   echo Moving data from $workdir to $rundir...
   echo mv $workdir/* $rundir/
   echo rm -r $workdir
   echo Done
fi
